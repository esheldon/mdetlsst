# no stack
make-condor.py --run run-nostack01c --njobs 2000 --seed 22414 --ntrial 100 --nepochs 1 --nostack

nostack m1: 0.000460004 +/- 0.000619505 (3 sigma)


# odd image, no dithers or rotations etc.
om1: 0.000180467 +/- 0.00138297 (3 sigma)

# odd image, now with only dithers turned on
om1: 0.00447688 +/- 0.00184495 (3 sigma)

# doing our own psf coadd, dithers, 1 epoch, 1 band, odd image
# run-dither-psfcoadd01wq
# run-dither-psfcoadd01

d m1: -0.000190355 +/- 0.000817988 (3 sigma)


# doing our own psf coadd, dithers, rotation, 1 epoch 1 band, odd image
# run-dithrot-psfcoadd01wq
# run-dithrot-psfcoadd01

make-condor.py --run run-dithrot-psfcoadd01 --njobs 2000 --seed 22427 --ntrial 100 --nepochs 1 --bands r --coadd-dim 351 --dither --rotate
so far

dr m1: 0.00022097 +/- 0.000780681 (3 sigma)

# doing our own psf coadd, dithers, rotation, cosmics, 1 epoch 1 band, odd image
# run-cosmics01
# run-cosmics01c

make-condor.py --run run-cosmics01c --njobs 8000  --seed 22432 --ntrial 100 --nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays

processed: 26455
drc m1: 0.000518781 +/- 0.000711157 (3 sigma)

# doing our own psf coadd, dithers, rotation, cosmics, bad columns, 1 epoch 1 band, odd image
# run-cosbc01c

make-condor.py --run run-cosbc01c --njobs 5000 --seed 22442 --ntrial 100 --nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays --bad-columns


# processed: 29165
drcb m1: -0.00015786 +/- 0.000791077 (3 sigma)


# run-*descwl*
# wldeblend galaxies,
# doing our own psf coadd, dithers, rotation, cosmics, bad columns, 1 epoch 1 band, odd image

processed: 210117
drcbW m1: -7.60145e-05 +/- 0.000787508 (3 sigma)

# run-varywcs01
# varied both wcs shear and scale
# exp galaxies,

make-condor.py --run run-varywcs01 --njobs 2000 --seed 22445 --ntrial 100
--nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays
--bad-columns --vary-wcs-shear --vary-scale

processed: 31025
drcbv m1: -0.00010605 +/- 0.000767164 (3 sigma) c2: -8.22732e-07 +/- 1.50306e-05 (3 sigma)

# next put in some psf shape in g2. This means we should
# add ability to do additive in the shear calculator
# all else same as run-varywcs01

# run-psfg2
make-condor.py --run run-psfg2 --njobs 2000 --seed 230${i} --ntrial 100
--nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays
--bad-columns --vary-wcs-shear --vary-scale --psf-g2 0.02

processed: 29178
drcbvp m1: -0.000136185 +/- 0.000790829 (3 sigma) c2: -2.74396e-06 +/- 1.51087e-05 (3 sigma)


# large dither offsets
 make-condor.py --run run-bigdith01 --njobs 1000 --seed 341${i} --ntrial 100
 --nepochs 1 --coadd-dim 351 --dither --rotate --cosmic-rays --bad-columns
 --vary-wcs-shear --vary-scale --psf-g2 0.02 --dither-range 500 --se-dim 2048
 --bands r

processed: 25920
drcbvpLD m1: 3.55206e-05 +/- 0.000832433 (3 sigma) c2: -8.15667e-07 +/- 1.61921e-05 (3 sigma)



# riz but still one epoch

python make-condor.py --run run-riz01 --njobs 2000 --seed 340${i} --ntrial 100
--nepochs 1 --coadd-dim 351 --dither --rotate --cosmic-rays --bad-columns
--vary-wcs-shear --vary-scale --psf-g2 0.02; done

processed: 29171
drcbvpRIZ m1: 6.09361e-05 +/- 0.00058318 (3 sigma) c2: -3.92082e-07 +/- 1.41084e-05 (3 sigma)


# ran with both images even, looks fine, with m -0.0009 < m < 0.0009.
run-even01*
# ran with both coadd even se odd, looks fine, with m -0.001 < m < 0.001 so
# far.
run-evencoadd01*


# ran with power spectrum psf, variation_factor 1.0 (default 10) which should
# be not extreme.  3 bands, 1 epoch per band
run-pspsf02*

drcbvRIZVP1-1 m1: 5.46647e-05 +/- 0.000511308 (3 sigma) c2: 1.99231e-06 +/- 9.4422e-06 (3 sigma)


# run with variance factor 10 still just riz one epoch
run-pspsf03 and run-drcbvRIZVP10-1 combined

drcbvRIZVP10-1 m1: 0.0015791370619251863 +/- 0.0006143070568584828 (3 sigma) c2: -2.7998012106269173e-06 +/-  1.3837405146683827e-05 (3 sigma)


# run with variance factor 10, but 10 epochs per band
run-pspsf04 so far
drcbvRIZVP10-10 m1: 0.000196262 +/- 0.000799391 (3 sigma) c2: 2.05778e-07 +/- 1.64111e-05 (3 sigma)

# stars at high density 20/sq arcmin
#run-drcbvsRIZVP01-01*

#drcbvRIZVP1-1s m1: -0.000934491 +/- 0.000651256 (3 sigma) c2: 3.6553e-06 +/- 9.83987e-06 (3 sigma)


# stars and star masks and bleed trails
# this one was at high density, 20/sq arcmin
run-drcbvsSRIZVP01-01*

# drcbvRIZVP1-1sS m1: -0.00108199 +/- 0.000755978 (3 sigma) c2: -6.79178e-07 +/- 1.12536e-05 (3 sigma)

# stars and star masks and bleed trails at 1/sq arcmine
run-drcbvsSRIZVP01-01-v2*

drcbvRIZVP1-1sS m1: -0.000108033 +/- 0.000479581 (3 sigma) c2: -4.84301e-06 +/- 8.76489e-06 (3 sigma)

# fixed bug weighting in psf coadd with run run-drcbvsSRIZVP01-01-v3* and got
# m1: -0.00018967 +/- 0.00049179 (3 sigma)
# c2: -1.36212e-06 +/- 9.09072e-06 (3 sigma)
# looks consistent with v2 before bug fix


# slurm notes
run-drcbvRIZVP10-1
50 nodes 1 hour queued for 8.5 hours (actually ran for only 35 min)
100 nodes 3 hours

run-drcbvsSRIZVP1-01-anl*
16 nodes, 9 hours, did not wait that long actually ran in 7:15 so could do
7:45 or 8 hours for those

run-drcbvsSRIZVP01-01-v3-anl*
16 nodes took 6:50 to finish, had set limit to 7:50


# seeing bias with stellar density
# *test01 runs, used hash 1fbb7e7
#
# noticed that the mean R of stars is non zero
# mag limit 20 gives no problem in R but 17 does
# turning off saturation of pixels made the mean R like -0.3!
# using variable folding threshold did not help (worried about sharp edges in
# stamps)

- things to try
    * different peak finder etc. -> sextractor
        - -0.3 for all?
        - going back to stack reduced it greatly
    - masking bright-ish stars; we even did a cut at 17 though!
    - full deblending
    - just taking peaks and not centers after deblending

- cutting s/n helps!

    - so low s/n objects are biased when there are bright and brightish stars 

    - ideas why
        - junk objects more likely with bright stars around?
        - things near the edge of the image due to wings?  Would just do a cut
          which we should be doing anyway
            - running with trim
            - no difference
        - could be junk near the stars rather than far away, in which case the
          star mask for bright stars would be key
        - stamps too small for low s/n objects?
            - 32x32, 48x48 looks no better
        - deblending
            - still biased, maybe worse?
        - lower thresh to 5
            - about the same
        - 6'' box around stars with mag < 18
            - about the same
        - did grid run with mag 17 (grid gals with small size and fixed mag)
          and all looks fine
             - this suggests it isn't the drawing of mag 17 objects that is
               the problem

- trying full run
    - ran with blending
        run-drcbvWsDRIZVP01-01-mag17-brightmask-*
        bias is much higher now, maybe it was deblending?
    - running without deblending now
        run-drcbvWsDRIZVP01-01-mag17-nodeblend-*

    - bias is higher.  Put back in expand stamps rather than fold
      descwl-shear-sims d946958ed0964ff0a6dc4584e3a11d6d2ad79fa7
        - run-drcbvWsDRIZVP01-01-mag17-expand-* (not wq one had name redo
          instead, need to rename)


    - running through and testing commits (although by hand)

        - I reverted sim code to 1fbb7e7 on 2020-03-04 and did a single job
          and the outputs are identical, so it is something in the sim since
          that commit
        - b29ca9e filter stars outside sampler
            - single trial looks same
        - 5dc71f2 remove duplicated code 
            - single trial looks same


        - 72bb0eb (current on bright_stars) remove unused import
            - does differ

        - 72bb0eb but bright strateget expand and trim_stamps false
            - does differ and is exactly same as above

        - 72bb0eb but reverting by band sat
            - does differ

        - 5dc71f2 but with by band sat test-5dc71f2-byband-sat.fits agrees
          with test-72bb0eb.fits for single trial

            for 20 trials there were differences, but less common

            The newer by band sat generally saturates at *brighter* levels in
            r,i,z. Is having them saturate a good thing since they can't get
            too bright?  I did try with the bright mask but it didn't help
            this problem

            recall mag 20 limit worked fine

            are our sat vals correct when we have the full 10 year depth
            in wldeblend?

            try repeating recent bright_stars branch with saturation off,
            and it should get worse
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-nosat-wq 
            72bb0ebf9a0ce356938d6b09bab8d86559e24ea2

- I think it is the psf dims being too small
    - running again with config
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim.yaml 
      runs are
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-psf-dims-wq
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-psf-dims-c1
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-psf-dims-anl*
                had time 7:15:00 but ran over

      Now using original psf dims and setting zeros for the bad psf pixels.
      This fixes the issue with visible boxes around bright stars in the
      reconvolved images.
      
      I think this could work ok for many epochs but maybe not for 3 (r+i+z)
      but I'll do a test

      mdet-lsst-sim (psf-dims) 3afd6fa7090f3ba0256c2ea4310e39bb784edc4c
      descwl_shear_sims (master) 85fe859b789a75ea4a7234b39ca8148a06884cc5
      descwl_coadd (zero-bad-psf) c5676905ad5f20b46ffae5f6c0ac81ed30ed8ea4
      metadetect (deblend) b9062a7fa3b70eeed393b7171250f75daf7bef28

      runs
          - with stars no mag cut
              - run-drcbvWsDRIZVP01-01-expand-notrim-psf-dims-*
              (one was --expand accidentally)
              - so far seeing close to 3 sigma *negative* m, opposite
              sign.  Running more
              - if it holds up, how can we explain?  Rendering?
              I checked, for mag 12 stars we are getting artifacts in the
              sheared images, even for huge stamps being put in or using
              folding threshold adjustments.  Maybe issue
              is with rendering the psf image?

              worse artifacts with saturation/interpolation

              it is due to psf fwhm being to small, making it larger it
              goes away

          - galaxies only for noise comparision and to make sure tweaks
            have not caused biases
              - run-drcbvWDRIZVP01-01-expand-notrim-psf-dims-*
              
               drcbvWDRIZVP01-01 m1: -0.000572808 +/- 0.0014463 (3 sigma) c2: 6.41395e-06 +/- 1.61771e-05 (3 sigma)

- next
    - for now, maybe easiest to just take any star marked as "saturated" and
      draw the bright star mask for all bands, and turn off saturation.
        - turn off the placing of fake bleeds etc.
    - scaling of wldeblend is wrong
    - use bleed trail templates
        - should we still do saturation?
