# no stack
make-condor.py --run run-nostack01c --njobs 2000 --seed 22414 --ntrial 100 --nepochs 1 --nostack

nostack m1: 0.000460004 +/- 0.000619505 (3 sigma)


# odd image, no dithers or rotations etc.
om1: 0.000180467 +/- 0.00138297 (3 sigma)

# odd image, now with only dithers turned on
om1: 0.00447688 +/- 0.00184495 (3 sigma)

# doing our own psf coadd, dithers, 1 epoch, 1 band, odd image
# run-dither-psfcoadd01wq
# run-dither-psfcoadd01

d m1: -0.000190355 +/- 0.000817988 (3 sigma)


# doing our own psf coadd, dithers, rotation, 1 epoch 1 band, odd image
# run-dithrot-psfcoadd01wq
# run-dithrot-psfcoadd01

make-condor.py --run run-dithrot-psfcoadd01 --njobs 2000 --seed 22427 --ntrial 100 --nepochs 1 --bands r --coadd-dim 351 --dither --rotate
so far

dr m1: 0.00022097 +/- 0.000780681 (3 sigma)

# doing our own psf coadd, dithers, rotation, cosmics, 1 epoch 1 band, odd image
# run-cosmics01
# run-cosmics01c

make-condor.py --run run-cosmics01c --njobs 8000  --seed 22432 --ntrial 100 --nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays

processed: 26455
drc m1: 0.000518781 +/- 0.000711157 (3 sigma)

# doing our own psf coadd, dithers, rotation, cosmics, bad columns, 1 epoch 1 band, odd image
# run-cosbc01c

make-condor.py --run run-cosbc01c --njobs 5000 --seed 22442 --ntrial 100 --nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays --bad-columns


# processed: 29165
drcb m1: -0.00015786 +/- 0.000791077 (3 sigma)


# run-*descwl*
# wldeblend galaxies,
# doing our own psf coadd, dithers, rotation, cosmics, bad columns, 1 epoch 1 band, odd image

processed: 210117
drcbW m1: -7.60145e-05 +/- 0.000787508 (3 sigma)

# run-varywcs01
# varied both wcs shear and scale
# exp galaxies,

make-condor.py --run run-varywcs01 --njobs 2000 --seed 22445 --ntrial 100
--nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays
--bad-columns --vary-wcs-shear --vary-scale

processed: 31025
drcbv m1: -0.00010605 +/- 0.000767164 (3 sigma) c2: -8.22732e-07 +/- 1.50306e-05 (3 sigma)

# next put in some psf shape in g2. This means we should
# add ability to do additive in the shear calculator
# all else same as run-varywcs01

# run-psfg2
make-condor.py --run run-psfg2 --njobs 2000 --seed 230${i} --ntrial 100
--nepochs 1 --bands r --coadd-dim 351 --dither --rotate --cosmic-rays
--bad-columns --vary-wcs-shear --vary-scale --psf-g2 0.02

processed: 29178
drcbvp m1: -0.000136185 +/- 0.000790829 (3 sigma) c2: -2.74396e-06 +/- 1.51087e-05 (3 sigma)


# large dither offsets
 make-condor.py --run run-bigdith01 --njobs 1000 --seed 341${i} --ntrial 100
 --nepochs 1 --coadd-dim 351 --dither --rotate --cosmic-rays --bad-columns
 --vary-wcs-shear --vary-scale --psf-g2 0.02 --dither-range 500 --se-dim 2048
 --bands r

processed: 25920
drcbvpLD m1: 3.55206e-05 +/- 0.000832433 (3 sigma) c2: -8.15667e-07 +/- 1.61921e-05 (3 sigma)



# riz but still one epoch

python make-condor.py --run run-riz01 --njobs 2000 --seed 340${i} --ntrial 100
--nepochs 1 --coadd-dim 351 --dither --rotate --cosmic-rays --bad-columns
--vary-wcs-shear --vary-scale --psf-g2 0.02; done

processed: 29171
drcbvpRIZ m1: 6.09361e-05 +/- 0.00058318 (3 sigma) c2: -3.92082e-07 +/- 1.41084e-05 (3 sigma)


# ran with both images even, looks fine, with m -0.0009 < m < 0.0009.
run-even01*
# ran with both coadd even se odd, looks fine, with m -0.001 < m < 0.001 so
# far.
run-evencoadd01*


# ran with power spectrum psf, variation_factor 1.0 (default 10) which should
# be not extreme.  3 bands, 1 epoch per band
run-pspsf02*

drcbvRIZVP1-1 m1: 5.46647e-05 +/- 0.000511308 (3 sigma) c2: 1.99231e-06 +/- 9.4422e-06 (3 sigma)


# run with variance factor 10 still just riz one epoch
run-pspsf03 and run-drcbvRIZVP10-1 combined

drcbvRIZVP10-1 m1: 0.0015791370619251863 +/- 0.0006143070568584828 (3 sigma) c2: -2.7998012106269173e-06 +/-  1.3837405146683827e-05 (3 sigma)


# run with variance factor 10, but 10 epochs per band
run-pspsf04 so far
drcbvRIZVP10-10 m1: 0.000196262 +/- 0.000799391 (3 sigma) c2: 2.05778e-07 +/- 1.64111e-05 (3 sigma)

# stars at high density 20/sq arcmin
#run-drcbvsRIZVP01-01*

#drcbvRIZVP1-1s m1: -0.000934491 +/- 0.000651256 (3 sigma) c2: 3.6553e-06 +/- 9.83987e-06 (3 sigma)


# stars and star masks and bleed trails
# this one was at high density, 20/sq arcmin
run-drcbvsSRIZVP01-01*

# drcbvRIZVP1-1sS m1: -0.00108199 +/- 0.000755978 (3 sigma) c2: -6.79178e-07 +/- 1.12536e-05 (3 sigma)

# stars and star masks and bleed trails at 1/sq arcmine
run-drcbvsSRIZVP01-01-v2*

drcbvRIZVP1-1sS m1: -0.000108033 +/- 0.000479581 (3 sigma) c2: -4.84301e-06 +/- 8.76489e-06 (3 sigma)

# fixed bug weighting in psf coadd with run run-drcbvsSRIZVP01-01-v3* and got
# m1: -0.00018967 +/- 0.00049179 (3 sigma)
# c2: -1.36212e-06 +/- 9.09072e-06 (3 sigma)
# looks consistent with v2 before bug fix


# slurm notes
run-drcbvRIZVP10-1
50 nodes 1 hour queued for 8.5 hours (actually ran for only 35 min)
100 nodes 3 hours

run-drcbvsSRIZVP1-01-anl*
16 nodes, 9 hours, did not wait that long actually ran in 7:15 so could do
7:45 or 8 hours for those

run-drcbvsSRIZVP01-01-v3-anl*
16 nodes took 6:50 to finish, had set limit to 7:50


# seeing bias with stellar density
# *test01 runs, used hash 1fbb7e7
#
# noticed that the mean R of stars is non zero
# mag limit 20 gives no problem in R but 17 does
# turning off saturation of pixels made the mean R like -0.3!
# using variable folding threshold did not help (worried about sharp edges in
# stamps)

- things to try
    * different peak finder etc. -> sextractor
        - -0.3 for all?
        - going back to stack reduced it greatly
    - masking bright-ish stars; we even did a cut at 17 though!
    - full deblending
    - just taking peaks and not centers after deblending

- cutting s/n helps!

    - so low s/n objects are biased when there are bright and brightish stars 

    - ideas why
        - junk objects more likely with bright stars around?
        - things near the edge of the image due to wings?  Would just do a cut
          which we should be doing anyway
            - running with trim
            - no difference
        - could be junk near the stars rather than far away, in which case the
          star mask for bright stars would be key
        - stamps too small for low s/n objects?
            - 32x32, 48x48 looks no better
        - deblending
            - still biased, maybe worse?
        - lower thresh to 5
            - about the same
        - 6'' box around stars with mag < 18
            - about the same
        - did grid run with mag 17 (grid gals with small size and fixed mag)
          and all looks fine
             - this suggests it isn't the drawing of mag 17 objects that is
               the problem

- trying full run
    - ran with blending
        run-drcbvWsDRIZVP01-01-mag17-brightmask-*
        bias is much higher now, maybe it was deblending?
    - running without deblending now
        run-drcbvWsDRIZVP01-01-mag17-nodeblend-*

    - bias is higher.  Put back in expand stamps rather than fold
      descwl-shear-sims d946958ed0964ff0a6dc4584e3a11d6d2ad79fa7
        - run-drcbvWsDRIZVP01-01-mag17-expand-* (not wq one had name redo
          instead, need to rename)


    - running through and testing commits (although by hand)

        - I reverted sim code to 1fbb7e7 on 2020-03-04 and did a single job
          and the outputs are identical, so it is something in the sim since
          that commit
        - b29ca9e filter stars outside sampler
            - single trial looks same
        - 5dc71f2 remove duplicated code 
            - single trial looks same


        - 72bb0eb (current on bright_stars) remove unused import
            - does differ

        - 72bb0eb but bright strateget expand and trim_stamps false
            - does differ and is exactly same as above

        - 72bb0eb but reverting by band sat
            - does differ

        - 5dc71f2 but with by band sat test-5dc71f2-byband-sat.fits agrees
          with test-72bb0eb.fits for single trial

            for 20 trials there were differences, but less common

            The newer by band sat generally saturates at *brighter* levels in
            r,i,z. Is having them saturate a good thing since they can't get
            too bright?  I did try with the bright mask but it didn't help
            this problem

            recall mag 20 limit worked fine

            are our sat vals correct when we have the full 10 year depth
            in wldeblend?

            try repeating recent bright_stars branch with saturation off,
            and it should get worse
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-nosat-wq 
            72bb0ebf9a0ce356938d6b09bab8d86559e24ea2

- I think it is the psf dims being too small
    - running again with config
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim.yaml 
      runs are
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-psf-dims-wq
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-psf-dims-c1
            run-drcbvWsDRIZVP01-01-mag17-expand-notrim-psf-dims-anl*
                had time 7:15:00 but ran over

      Now using original psf dims and setting zeros for the bad psf pixels.
      This fixes the issue with visible boxes around bright stars in the
      reconvolved images.
      
      I think this could work ok for many epochs but maybe not for 3 (r+i+z)
      but I'll do a test

      mdet-lsst-sim (psf-dims) 3afd6fa7090f3ba0256c2ea4310e39bb784edc4c
      descwl_shear_sims (master) 85fe859b789a75ea4a7234b39ca8148a06884cc5
      descwl_coadd (zero-bad-psf) c5676905ad5f20b46ffae5f6c0ac81ed30ed8ea4
      metadetect (deblend) b9062a7fa3b70eeed393b7171250f75daf7bef28

      runs
          - with stars no mag cut
              - run-drcbvWsDRIZVP01-01-expand-notrim-psf-dims-*
              (one was --expand accidentally)
              - so far seeing close to 3 sigma *negative* m, opposite
              sign.  Running more
              - if it holds up, how can we explain?  Rendering?
              I checked, for mag 12 stars we are getting artifacts in the
              sheared images, even for huge stamps being put in or using
              folding threshold adjustments.  Maybe issue
              is with rendering the psf image?

              worse artifacts with saturation/interpolation

              it is due to psf fwhm being to small, making it larger it
              goes away

          - galaxies only for noise comparision and to make sure tweaks
            have not caused biases
              - run-drcbvWDRIZVP01-01-expand-notrim-psf-dims-*
              
               drcbvWDRIZVP01-01 m1: -0.000572808 +/- 0.0014463 (3 sigma) c2: 6.41395e-06 +/- 1.61771e-05 (3 sigma)

- now doing masking of BRIGHT and interpolating
    - descwl_coadd (replace-bright-stars) 4ec1118c982c5950dc9ae7d89dfc5b1508c2d7d3
    - metadetect (deblend) 73e49c13fa9e14a1d7cf5841b3e830170ab35bcb
    - mdet-lsst-sims (send-rng-to-coadds) e38d09524756e14e8f4c910569922900cecf79a9
    - descwl-shear-sims (bright-star-mask) f67dab03c7c95d00983fcf640827ca491539d71a

- next
    - for now, maybe easiest to just take any star marked as "saturated" and
      draw the bright star mask for all bands, and turn off saturation.
        - turn off the placing of fake bleeds etc.
    - scaling of wldeblend is wrong
    - use bleed trail templates
        - should we still do saturation?


- noise tests
    - don't use round wldeblend
    - don't do noise cancelling
    - stars run run-drsWRIZ-v3
    - no stars run run-drWRIZ-v2
    - descwl-shear-sims (master) da9d033ce1b713a07e8fbdd5764637f3e17c7546
    - descwl_coadd (master) 19db82809c9d2aee9f12c62eb51611bf3b2732e3
    - metadetect (master) 9b57df37de943e0a8198ffa2f517572fb300d33d
    - mdet-lsst-sim (weighting) 96aa4fca9408440bd72c8092f149184d32dec771

    - now I see that using the most area (in terms of star cut) and lowest s/n
      cut gives the most precise shear recovery.
    - the increase in noise is about 14%
    - so for plot we can just do s/n > 10 and compare noise with stars, but
      since we are not seeing a bias I think maybe we don't even need the
      plot.

- lessons from the above
	- when you do noise cancelling you get smaller errors using higher s/n cuts
	- this is not true without the noise cancelling
	- Hypothesis: higher s/n objects are more likely to be detected in both runs so we cancel the shape noise

    - Corollary
        - the noise cancelling works differently with stars in place because
          they are not sheared (they don't move)
        - To test noise differences with and without stars we can't do noise
          cancelling

    - what should have been obvious
        - you can't test noise with and without stars (or in any other way)
          with round objects.
        - You will think the differences are bigger than they are because you
          ignored the dominant noise source

- larger test with round wldeblend and stars
    - stars run run-drsWRIZ-v4
    - s/n > 10 T ratio 1.2  

drsWRIZ -0.00219223 < m1 < 0.00336053 (99.7%)  -1.9183e-05 < c2 < 3.13332e-05 (99.7%)

- using star bleeds but still gauss psf (moffat bright stars are huge and our
  masks are inadequate)

    descwl-shear-sims (bleeds) 481b67ae2659807f0757a36015b319840d7cfaea
    descwl_coadd (bright-flag-sat) b65bf4a685832e7c21394b1235829c16486bfafd
    metadetect (master) 9b57df37de943e0a8198ffa2f517572fb300d33d
    mdet-lsst-sim (weighting) 5b55ec0c19ff3afa574a5565b47231484ba6957e
    mdet-lsst-config (master) 29d16e609d2b5b7245f42bdd34373faa07eef50d

    drsSWRIZ-v1
    
    looks OK

- with power specrum psf and moffat, we need to make the masks adaptive
    drsSBWRIZ-v1, v2

    forgot P for power spectrum psf

    bias as a function of density
    with v2 saved masked frac and cutting on that also leaves a bias
    still doing full analysis to make a plot

- run-drsPWRIZ-v1
    no saturation, no bleeds, but still PS/moffat psf

    if this works it could mean we need better interpolation for
    the bright stars

        - could try Matt's idea of fitting a psf model to the area,
          subtracting it, interpolating, then adding back
        - a simple way forward would be to exclude any fields with a
        bright stars, say brighter than 17
    - bias

    looked at some reconvolved images: there are boxes, go away
    if we use larger psfs

    still barely visible for mag 17!

- run-drsSBWRIZ-v3
    - saving min_star_mag
    - mdet-lsst-sims (mask-frac) c85c3f8582402b33eb351a5186b2693b151004c3
    - descwl-shear-sims (bleeds) f1138bb9cd16f55f7be92f89a163bb49262dc8ea
    - descwl_coadds (bright-flag-sat) 79fff565110169019b6fabfa3a5adb335334251a
    - metadetect (master) 9b57df37de943e0a8198ffa2f517572fb300d33d

    - seeing negative m1 bias

    - even cutting to low star density or min mag 19 retains the bias
    - maybe related to rendering changes?

- run-drgridRIZ-v1
    - grid exp 22 mag 8x8, for got P on it! it is power spectrum psf
    - see 
        0.0012705 < m1 < 0.00178272 (99.7%)
        -3.92948e-06 < c1 < 6.27837e-06 (99.7%)
        -4.41974e-06 < c2 < 6.31765e-06 (99.7%)
    - it was due to the close grid!  Not sure why exactly

- run-drgridRIZ-v2
    - forgot P on it
    - same but 17.75 mag 6x6 grid
    m1err: 7.06484e-05 (99.7%)
    0.000262936 < m1 < 0.000404232 (99.7%)
    -1.72265e-05 < c1 < 5.51327e-06 (99.7%)
    -8.08049e-06 < c2 < 1.4998e-05 (99.7%)

- run-drPRIZ-v1
   like run-drgridRIZ-v1 but random placement (not forgot P on that one)

    m1err: 0.000301709 (99.7%)
    0.000151968 < m1 < 0.000755387 (99.7%)
    -1.34662e-05 < c1 < 6.27998e-06 (99.7%)
    -8.10764e-06 < c2 < 1.02202e-05 (99.7%)

    so the bias in run-drgridRIZ-v1 was due to the close grid

- run-drgridPRIZ-mag17.75-hlr0.1-v1
    - bright, grid but small hlr

    m1err: 0.000206381 (99.7%)
    0.000476733 < m1 < 0.000889495 (99.7%)
    -3.257e-06 < c1 < 8.4159e-06 (99.7%)
    -8.27095e-06 < c2 < 4.39109e-06 (99.7%)

- run-drgridPRIZ-mag17.75-hlr0.1-v2
    - should not have called v2
    - using mdet-v002.yaml mdet config with psf gauss rather than fitgauss
    - horrible, not sure what went wrong

- run-drgridPRIZ-mag17.75-hlr0.1-3epoch-v1.yaml
    - looks fine!
    - it was the psf variation

    m1err: 0.00017257 (99.7%)
    0.000121935 < m1 < 0.000467075 (99.7%)
    -7.32199e-06 < c1 < 2.26714e-06 (99.7%)
    -7.63162e-06 < c2 < 2.7438e-06 (99.7%)

- run-drsBMWRIZ-v1
    - Moffat psf, using PS psf with small variations

    - descwl-shear-sims (master) 7ba7fddc38aa639c176dc37c3138058e053a9264
    - descwl_coadd (master) 09f3ce40101c7707fe80abbb9d85169e1740ad01
    - metadetect (master) a63236f063fe2979c7fbf89563080e6fe66895fb
    - mdet-lsst-sim (mask-frac) 0c30e0c63a368b43e5011d6069b23f827828a33b

    - so far
    see trend with stellar density cut, but it is gone or much less
    when cutting s2n > 20, should try other s2n cuts

    - definitely seeing bias that depends on s/n, sign of some kind of
    selection effect
        - we know stars will move and the should not, we tested it with
        galaxies
        - the interpolated region is also moving
        - the *mask* is not moving, shearing.
        - need to explore this more but shelving it for now to work on wcs

- run-drsMWRIZsub-v1
    - PS psf not pure moffat
    subtract bright stars
    no star bleeds
    saturation ON
    - looks terrible

- run-drMWRIZ-v1
    - PS psf not pure moffat
    - same as run-drsMWRIZsub-v1 but no stars, does have saturation
    - biased!

- run-drgridMWRIZ-v1
    - PS psf not pure moffat
    - same as run-drMWRIZsub-v1 but on a grid
- run-drMWRIZ-e03-v1
    - PS psf not pure moffat
    - non grid but with 3 epochs
    - might be better

    s2n*-s2nmax-1000-Tratio1.2
    -0.00170132 < m1 < 0.000224577 (99.7%)
    -0.00172 < m1 < 0.000203144 (99.7%)
    -0.00155687 < m1 < 6.37816e-05 (99.7%)
    -0.00131863 < m1 < 6.62186e-05 (99.7%)
    -0.00120341 < m1 < 2.7618e-05 (99.7%)


- run-drMWRIZ-e01-v1
    - PS psf not pure moffat
    - non grid 1 epochs

    s2n*-s2nmax-1000-Tratio1.2
    -0.00491354 < m1 < -0.0018458 (99.7%)
    -0.00492467 < m1 < -0.00186832 (99.7%)
    -0.00446195 < m1 < -0.00189649 (99.7%)
    -0.00412676 < m1 < -0.00193204 (99.7%)
    -0.00417858 < m1 < -0.00221654 (99.7%)

- run-drMWRIZ-e01-pdim101-v1
    - PS psf not pure moffat
    - psf dim 101x101
    -0.00643398 < m1 < -0.00236129 (99.7%)
    -0.00628634 < m1 < -0.00222532 (99.7%)
    -0.00608821 < m1 < -0.00263865 (99.7%)
    -0.00531509 < m1 < -0.00235613 (99.7%)
    -0.00572281 < m1 < -0.00309834 (99.7%)

- run-drMWRIZ-e01-pdim101-gauss-v1
    - PS psf not pure moffat
    - metacal gauss psf treatment
    - psf dim 101x101
    -0.00561233 < m1 < -0.00131793 (99.7%)
    -0.00555236 < m1 < -0.00127129 (99.7%)
    -0.00476986 < m1 < -0.00108147 (99.7%)
    -0.00414951 < m1 < -0.000994451 (99.7%)
    -0.00402935 < m1 < -0.00121925 (99.7%)

- run-drWRIZ-v1
    - gauss psf, round gals
    - note there was no saturation here
    -0.00346503 < m1 < 0.00428442 (99.7%)
    -0.0040814 < m1 < 0.0028896 (99.7%)
    -0.00278754 < m1 < 0.0028852 (99.7%)
    -0.0030092 < m1 < 0.00190814 (99.7%)
    -0.00131853 < m1 < 0.0031443 (99.7%)

- run-drWRIZ-sat-v1
    - gauss with saturation

    -0.00171055 < m1 < 0.00270137 (99.7%)
    -0.00169746 < m1 < 0.00224007 (99.7%)
    -0.00131682 < m1 < 0.0018838 (99.7%)
    -0.00157975 < m1 < 0.00120882 (99.7%)
    -0.00115049 < m1 < 0.00136538 (99.7%)


- run-drMWRIZ-e01-pdim101-v2
    - pure moffat no PS psf
    - first results

    -0.00200233 < m1 < 0.000901179 (99.7%)
    -0.00232032 < m1 < 0.000112974 (99.7%)
    -0.00208602 < m1 < -1.09187e-05 (99.7%)
    -0.00191414 < m1 < -5.91293e-05 (99.7%)


- run-drcbPWRIZ-e01-v1
    repeat of run-drcbvWDRIZVP01-01-expand-notrim, only difference is trimming
    stamps (no longer an option ) and expand stars (only for stars) instead
    using gsparams, but there are no stars here
    -0.00494484 < m1 < -0.000974678 (99.7%)
    -0.00485397 < m1 < -0.00144677 (99.7%)
    -0.00463954 < m1 < -0.00163184 (99.7%)
    -0.00459561 < m1 < -0.00183136 (99.7%)

- run-drcbPWRIZ-e01-notrim-v1
    not trimming stamps
    -0.00609754 < m1 < -0.00211825 (99.7%)
    -0.00569964 < m1 < -0.00228601 (99.7%)
    -0.0055499 < m1 < -0.00253859 (99.7%)
    -0.00446522 < m1 < -0.00170969 (99.7%)
    regression

    what we know
        - gaussian psf looks ok
        - we know bias decreases for PS psf with more epochs
        - smaller bias for moffat.
        - larger psf dims didn't help
    ideas
        - scaling of wldeblend?  Our weights are 
        being ignored down stream, if we rescale it
        changes the wrongness
        - maybe try running with a single band and 3 epochs
          no dithering or rotations, moffat psf

- run-drMWI-e03-pdim101-v1
    - i band only, moffat, 3 epochs not dithers or rotations
    THIS WAS MISNAMED
    descwl-shear-sims 93c82488babbbb6def9e18875357db5dace39e9f
    descwl_coadd 6f89a8aa4a5484a1573e1c389d50974c6a9099e3
    mdetadetect a63236f063fe2979c7fbf89563080e6fe66895fb
    mdet-lsst-sim 8b05b37c8b178259b245f1a9b46a1002f04d9dfc

    -0.0017871 < m1 < 0.00186224 (99.7%)
    -0.00147252 < m1 < 0.00147524 (99.7%)
    -0.00134231 < m1 < 0.00128938 (99.7%)
    -0.0010626 < m1 < 0.00137614 (99.7%)

    Matt pointed out the 3 band won't work since the actual
    images are different, would need to do each coadd.

    That's a problem but doesn't really solve this issue since
    we know it worked before and works for gaussians

- run-drMWI-e03-pdim101-nfac0.58-v1
    - added noise factor 1/sqrt(3) to get expected noise for
      bands
    - THIS WAS MISNAMED

    -0.00140477 < m1 < 0.000444606 (99.7%)
    -0.00110189 < m1 < 0.000405356 (99.7%)
    -0.00107245 < m1 < 0.000268034 (99.7%)
    -0.000990446 < m1 < 0.00024526 (99.7%)

- run-drMWI-e03-pdim101-nfac0.58-v2
    - now with dithers and rotations
    - PROPERLY NAMED

    -0.00253242 < m1 < 1.08701e-05 (99.7%)
    -0.00213993 < m1 < 6.89018e-05 (99.7%)
    -0.00163038 < m1 < 0.000322181 (99.7%)
    -0.00185185 < m1 < -7.3797e-05 (99.7%)

- run-drMWI-e03-pdim201-nfac0.58-v1
    - see if larger psf images help
    -0.00292175 < m1 < -0.000696507 (99.7%)
    -0.00285748 < m1 < -0.000891879 (99.7%)
    -0.00283519 < m1 < -0.0010765 (99.7%)
    -0.00231508 < m1 < -0.00069203 (99.7%)

    It appears that in a single band we have a bias with just Moffat,
    but this is consistent with what we saw in multiple bands
    with just moffat and one epoch per band
    (run-drMWRIZ-e01-pdim101-v2).  So this is most likely not
    related to weighting (which larger PS bias might be)

    Don't know yet if related to the dithers and rot. Running more on
    run-drMWI-e03-pdim101-nfac0.58-v1 which had no dithers/rot despite name

- run-gridMI-mag22-hlr0.1-v1
    - grid with small exp objects, still s/n ~ 250
    - whoops, was epochs_per_band 10!
    6.50298e-05 < m1 < 0.00155616 (99.7%)

    - note also ran higher s/n on laptop, very small bias

- run-gridMI-e01-s2n15-hlr0.1-v1
    - s/n ~ 15 for all objects, 6x6 grid, no dithers or rotations
      hlr 0.1

      0.0030434 < m1 < 0.0207799 (99.7%)

- run-gridI-e01-mag18-hlr0.1-v1
    - same but gaussian psf
    - at s/n 10000 looks fine
    -0.000106696 < m1 < 0.000617305 (99.7%)

- run-gridI-e01-s2n15-hlr0.1-v1
    - same but gaussian psf
    - opposite sign bias
    - I saw no bias for high s/n with either Gaussian or Moffat

    -0.0239321 < m1 < -0.0043429 (99.7%)
    -0.000169974 < c1 < 0.000212005 (99.7%)
    -0.000341177 < c2 < 5.65919e-05 (99.7%)

- run-gridI-e01-s2n15-hlr0.1-nostack-v1
    - same but using nostack
    - huge error, must be a bug with the nostack code
    - note I saw no bias for high s/n so must be related to
      the noise

- TODO do a run with PS psf in single band


- run-drcbPWRIZ-e01-v2
    - repeating run-drcbPWRIZ-e01-v1 with Matt's bug fix, adding
      stats_ctrl.setWeighted(True)

  descwl-shear-sims 0f9abcd8d13152cca5277e1c64a2ddb4200bd718
      descwl_coadd e7b73bfe24b33927782f57548203a775d7e79047
      metadetect a63236f063fe2979c7fbf89563080e6fe66895fb
      mdet-lsst-sim a8e3912504c866b26d3ec45347357ccfcd23f6fb

    same

    -0.0062901 < m1 < -0.00279941 (99.7%)
    -0.00568339 < m1 < -0.00265748 (99.7%)
    -0.00571323 < m1 < -0.00305525 (99.7%)
    -0.00603989 < m1 < -0.00360843 (99.7%)

- run-gridI-e01-s2n15-hlr0.1-v2
    - after using ngmix with bug fixes
    - turns out the container had an old version of ngmix
    - I had been testing with master for a long time without
      a new release.

      -0.0185231 < m1 < -0.00711675 (99.7%)
      -0.000125071 < c1 < 9.78248e-05 (99.7%)
      -0.000131175 < c2 < 0.000100158 (99.7%)

- run-grid-dI-e06-s2n15-hlr0.1-v1
    - 6 epochs with dithers
    -0.0251275 < m1 < -0.00855712 (99.7%)
    -0.000158408 < c1 < 0.000166946 (99.7%)
    -0.000199293 < c2 < 0.000141235 (99.7%)

- run-grid-dI-e01-s2n15-hlr0.5-v1
    - what?
    - 0.0080492 < m1 < 0.0101611 (99.7%)

- run-grid-dI-e01-m18-hlr0.5-v1
    - mag 18 ok?
    - yes

    0.000373288 < m1 < 0.000431207 (99.7%)


- added tests of repeatability
     - checked that if I just copy the image to the noise it goes through 
       the same way, differences might be at the floating
       point level

- trivial sim
    - descwl-shear-sims (trivial-sim) 81eb76984093e829f91b3fcb55a2390ed6d59465
    - mdet-lsst-sim (trivial-sim-run) d713adea59b4f8b5d702ee9a755dab889fb35e67
    - descwl_coadd (master) e7b73bfe24b33927782f57548203a775d7e79047
    - metadetect (master) a63236f063fe2979c7fbf89563080e6fe66895fb

    - run-trivial-grid-s2n10000-hlr0.5-v1
        0.000403327 < m1 < 0.000472004 (99.7%)
    - run-trivial-grid-s2n100-hlr0.5-v1
        -0.000173387 < m1 < 0.000883123 (99.7%)
    - run-trivial-grid-s2n050-hlr0.5-v1
        0.00027537 < m1 < 0.000888845 (99.7%)
    - run-trivial-grid-s2n015-hlr0.5-v1
        -0.000330092 < m1 < 0.000711955 (99.7%)

- run-gridI-e01-s2n15-hlr0.1-p101-ptrim-v1
    - maybe the zeroing of bad psf pixels is causing a problem
    - added ability to go ahead and trim psf
    - curious dependence on measured size cut
    mc-run-gridI-e01-s2n15-hlr0.1-p101-ptrim-v1-Tratio0.1:0.00794972 < m1 < 0.0351616 (99.7%)
    mc-run-gridI-e01-s2n15-hlr0.1-p101-ptrim-v1-Tratio0.7:0.00821586 < m1 < 0.0354435 (99.7%)
    mc-run-gridI-e01-s2n15-hlr0.1-p101-ptrim-v1-Tratio0.8:0.00932194 < m1 < 0.0366977 (99.7%)
    mc-run-gridI-e01-s2n15-hlr0.1-p101-ptrim-v1-Tratio0.9:0.0022908 < m1 < 0.0309245 (99.7%)
    mc-run-gridI-e01-s2n15-hlr0.1-p101-ptrim-v1-Tratio1.0:-0.0431838 < m1 < -0.0083105 (99.7%)

- run-grid-dI-e01-s2n15-hlr0.5-p101-ptrim-v1
    - also biased

- run-grid-dI-e01-s2n15-hlr0.5-p101-ptrim-v1
    - reverted to old descwl_coadd c567690
    - 0.00590452 < m1 < 0.0139226 (99.7%)

- run-grid-dI-e01-s2n15-hlr0.5-oldsim-v1
    - old sim
    m1err: 0.00394083 (99.7%)
    0.00608936 < m1 < 0.013971 (99.7%)
    -6.90215e-05 < c1 < 9.54642e-05 (99.7%)
    -0.000160613 < c2 < 8.75015e-06 (99.7%)

- run-grid-dI-e01-s2n15-hlr0.5-oldall-v1
    - revert all 
      mdet-lsst-sim (psf-dims) 3afd6fa7090f3ba0256c2ea4310e39bb784edc4c
      descwl_shear_sims (master) 85fe859b789a75ea4a7234b39ca8148a06884cc5
      descwl_coadd (zero-bad-psf) c5676905ad5f20b46ffae5f6c0ac81ed30ed8ea4
      metadetect (deblend) b9062a7fa3b70eeed393b7171250f75daf7bef28

      0.00604535 < m1 < 0.0170174 (99.7%)

      possibilities
      - these are the wrong git hashes
      - this case would have always been biased

- run-trivial-grid-s2n10000-hlr0.5-v2
    - running trivial sim through stack etc.
    - 0.000415041 < m1 < 0.00043025 (99.7%)

- run-trivial-grid-s2n015-hlr0.5-v2
    0.000368861 < m1 < 0.00135832 (99.7%)

    descwl-shear-sims (fake-tan-wcs-trivial-sim) 50ec575a8f6e8a55f0c9dc13679dc8bef85ee163
    descwl_coadd (master) 6465c54b4f2aa3372790bc3c8cab87e1cd3d1082
    metadetect (master) a63236f063fe2979c7fbf89563080e6fe66895fb
    mdet-lsst-sim (refactor-trivial-wcs) d6505ee65654aa8e91994034a23227ca5b9f5567

    more running at nersc

- testing dithers
    - offseting psf exactly as image is offset
    - If I don't offset the psf 0.00373711 < m1 < 0.00516374 (99.7%)
    - If I do offset the psf 0.000151796 < m1 < 0.000704616 (99.7%)
    - this checks out

- run-trivial-grid-d-s2n015-hlr0.5-v1
    - dithers at low s/n
    - note mdet-lsst-sim hash below is just a merge of refactor-trivial-wcs
    with no additional changes

    so far 7/40
    -8.28577e-06 < m1 < 0.00248692 (99.7%)

    mdet-lsst-sim (master) b08559943dc25443eb955b7e4139c3b3b4e0bdf4
    descwl-shear-sims (add-dithers-trivial-sim) ad8e0bc87b793580ceb0e18ea24b5c9dc4e7791b
    metadetect (master) a63236f063fe2979c7fbf89563080e6fe66895fb
    descwl_coadd (master) 6465c54b4f2aa3372790bc3c8cab87e1cd3d1082
